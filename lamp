#!/usr/bin/python3
from argparse import ArgumentParser
from configparser import ConfigParser
import subprocess
import os
import sys

class Lamp():
    MAIN_CONFIGURATION_FILE = 'conf/compose.ini'

    def __init__(self):
        self.__read_mainconf_or_exit()
        base_path = os.path.basename(os.getcwd()).replace('-', '')
        self.project_name = self.config['main'].get('project_name', 'inet' + base_path)

        self.arg_parser = ArgumentParser(description="Process the only argument expected (The action)")
        self.arg_parser.add_argument('action', help='Command for lamp')


    def call_the_right_action(self):
        switcher = {
            'start': self.__do_start,
            'stop': self.__do_stop,
            'fullstart': self.__do_fullstart,
            'status': self.__do_status,
            'run-php': self.__do_run_php,
            'run-mysql': self.__do_run_mysql,
            'console': self.__do_console
        }
        switcher.get(self.__get_action(), self.__do_usage)()


    def colorize(self, string: str, color=33):
        return '\033[1;' + str(color) + 'm' + string + '\033[0m'



    def __read_mainconf_or_exit(self):
        """Check if the configuration file exists"""
        if os.path.isfile(self.MAIN_CONFIGURATION_FILE) is False:
            msg = 'Error: Missing ' + self.MAIN_CONFIGURATION_FILE + ' '
            msg+= 'Create it and override values from ' + self.MAIN_CONFIGURATION_FILE + '.tpl'
            raise IOError(msg)

        self.config = self.__parse_config()


    def __parse_config(self):
        config = ConfigParser()
        config.read(self.MAIN_CONFIGURATION_FILE)
        return config


    def __get_action(self):
        args = self.arg_parser.parse_known_args()

        return args[0].action


    def __do_usage(self):
        print('usage: ./' + os.path.basename(__file__) + ' [start|fullstart|stop|status|console|run-php|run-mysql]')
        sys.exit(1)


    def __do_start(self):
        print(self.colorize('Starting ' + os.path.basename(__file__)  + '..'))
        subprocess.call(['bin/compose', 'up'])
        print(self.colorize(os.path.basename(__file__)  + ' is running\n'))
        print('To access the ' + self.colorize('web server') + ' use : http://' + self.__get_vm_ip('apache') + '\n')

        self.__run_services_post_scripts()

        mailcatcher_ip = self.__get_vm_ip('mailcatcher')
        if mailcatcher_ip is not None:
            print('For ' + self.colorize('mailcatcher') + ' use : http://' + mailcatcher_ip + ':1080')
            print('                and : smtp://' + mailcatcher_ip + ':1025' + '\n')

        mongoclient_ip = self.__get_vm_ip('mongoclient')
        if mongoclient_ip is not None:
            print('For ' + self.colorize('mongoclient') + ' use : http://' + mongoclient_ip + ':3000' + '\n')

        pma_ip = self.__get_vm_ip('phpmyadmin')
        if pma_ip is not None:
            print('For ' + self.colorize('phpMyAdmin') + ' use : http://' + pma_ip + '\n')


    def __do_fullstart(self):
        print(self.colorize("Building required images ..."))
        subprocess.call(['bin/compose', 'build'])
        print(self.colorize("Build done."))
        self.__do_start()


    def __do_stop(self):
        print(self.colorize("Stopping docker-lamop ..."))
        subprocess.call(['bin/compose', 'stop'])
        print(self.colorize("docker-lamop is stopped."))


    def __do_status(self):
        subprocess.call(['bin/compose', 'ps'])


    def __do_console(self):
        self.arg_parser.add_argument('vm', help='VMs to enter in (mysql or php)')
        args = self.arg_parser.parse_known_args()
        if args[0].vm not in ['mysql', 'php']:
            raise Exception("You must define the VM as a second argument (php or mysql)")

        switcher = {
            'mysql': self.__get_mysql_vm_name,
            'php': self.__get_php_vm_name
        }
        user_name = 'www-data' if args[0].vm == 'php' else 'root'
        subprocess.call(['docker', 'exec', '-u', user_name, '-it', switcher.get(args[0].vm)(), 'bash'])


    def __pars_unknown_args(self):
        args = self.arg_parser.parse_known_args()
        return ' '.join(args[1])


    def __do_run_php(self):
        tty = 't' if sys.stdin.isatty() else ''
        cmd = ['docker', 'exec', '-u', 'www-data', '-it', self.__get_php_vm_name()]
        cmd+= ['bash', '-c', '--', 'cd /var; exec /usr/bin/php ' + self.__pars_unknown_args()]
        subprocess.call(cmd, stdin=sys.stdin)


    def __do_run_mysql(self):
        tty = 't' if sys.stdin.isatty() else ''
        password = self.config['main'].get('mysql.root_password', 'changeme');
        cmd = ['docker', 'exec', '-i' + tty, self.__get_mysql_vm_name()]
        cmd+= ['mysql', '-u', 'root', '-p' + password, self.__pars_unknown_args()]
        subprocess.call(cmd, stdin=sys.stdin)


    def __run_services_post_scripts(self):
        services = [service for service in self.config['main'].get('services', '').split(',') if service != '']
        for service in services:
            service_script = 'service/' + service + '.sh'
            if os.path.isfile(service_script) is False:
                continue

            subprocess.call(['bash', service_script, self.project_name + '_' + service + '_1'])


    def __get_php_vm_name(self):
        return self.project_name + '_php_1'


    def __get_mysql_vm_name(self):
        services_list = self.config['main'].get('services', '').split(',')
        if 'mysql' not in services_list:
            raise Exception("mysql is not defined in your services")

        return self.project_name + '_mysql_1'


    def __get_vm_ip(self, vm: str):
        cmd = ['docker', 'inspect', '-f', '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}']
        cmd+= [self.project_name + '_' + vm + '_1']
        try:
            result = subprocess.check_output(cmd, stderr=subprocess.STDOUT)
            return result.decode("utf-8", "strict").rstrip('\n')
        except subprocess.CalledProcessError as e:
            return None


if __name__ == '__main__':
    try:
        lamp = Lamp()
        lamp.call_the_right_action()
    except Exception as e:
        msg =  r"""
              ______ _____  _____   ____  _____
             |  ____|  __ \|  __ \ / __ \|  __ \
             | |__  | |__) | |__) | |  | | |__) |
             |  __| |  _  /|  _  /| |  | |  _  /
             | |____| | \ \| | \ \| |__| | | \ \
             |______|_|  \_\_|  \_\\____/|_|  \_\

"""

        msg += lamp.colorize(str(e), 31)
        print(msg)
        print("")
        raise e
        sys.exit(1)
