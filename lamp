#!/usr/bin/python3
from argparse import ArgumentParser
from configparser import ConfigParser
from clint.textui import colored, puts, columns
from json import loads as json_loads
import os
import subprocess
import sys

class Lamp():
    MAIN_CONFIGURATION_FILE = 'conf/compose.ini'

    def __init__(self):
        self.__read_mainconf_or_exit()
        base_path = os.path.basename(os.getcwd()).replace('-', '')
        self.project_name = self.config['main'].get('project_name', 'inet' + base_path)

        self.arg_parser = ArgumentParser(description="Process the only argument expected (The action)")
        self.arg_parser.add_argument('action', help='Main command to run)')

        self.vms = self.__get_vms()


    def call_the_right_action(self):
        switcher = {
            'start': self.__do_start,
            'stop': self.__do_stop,
            'fullstart': self.__do_fullstart,
            'status': self.__do_status,
            'run-php': self.__do_run_php,
            'run-mysql': self.__do_run_mysql,
            'console': self.__do_console
        }
        switcher.get(self.__get_action(), self.__do_usage)()


    def __read_mainconf_or_exit(self):
        """Check if the configuration file exists"""
        if os.path.isfile(self.MAIN_CONFIGURATION_FILE) is False:
            msg = 'Error: Missing ' + self.MAIN_CONFIGURATION_FILE + ' '
            msg+= 'Create it and override values from ' + self.MAIN_CONFIGURATION_FILE + '.tpl'
            raise IOError(msg)

        self.config = self.__parse_config()


    def __parse_config(self):
        config = ConfigParser()
        config.read(self.MAIN_CONFIGURATION_FILE)
        return config


    def __get_action(self):
        args = self.arg_parser.parse_known_args()

        return args[0].action


    def __get_vms(self):
        cmd = ['bin/compose', 'ps']
        vms_id = subprocess.check_output(cmd).splitlines()
        vms_info = dict()
        for vm_id in vms_id:
            vm_id = vm_id.decode('utf-8', 'strict')
            vms_info[vm_id] = self.__extract_vm_info(vm_id)

        return vms_info


    def __extract_vm_info(self, vm_id: str):
        try:
            result = subprocess.check_output(['docker', 'inspect', vm_id], stderr=subprocess.STDOUT)
            data = json_loads(result.decode("utf-8", "strict").rstrip('\n'))
            vm_info = {
                'name': data[0]['Name'].lstrip('/'),
                'compose_name': data[0]['Config']['Labels']['com.docker.compose.service'],
                'ports': data[0]['Config']['ExposedPorts'].keys() if 'ExposedPorts' in data[0]['Config'] else [],
                'image': data[0]['Config']['Image'],
                'ip': data[0]['NetworkSettings']['IPAddress'],
                'running': data[0]['State']['Running'],
            }

            return vm_info
        except subprocess.CalledProcessError as e:
            return None


    def __do_usage(self):
        print('usage: ./' + os.path.basename(__file__) + ' [start|fullstart|stop|status|console|run-php|run-mysql]')
        sys.exit(1)


    def __do_start(self):

        puts(colored.green('Starting ' + self.project_name  + ' ...'))
        subprocess.call(['bin/compose', 'up'])
        puts(colored.green(self.project_name  + ' has been started\n'))

        self.vms = self.__get_vms()

        self.__run_services_post_scripts()

        puts('To access the ' + colored.yellow('web server') + ' use : http://' + self.__get_vm_item('apache', 'ip') + '\n')

        mailcatcher_ip = self.__get_vm_item('mailcatcher', 'ip')
        if mailcatcher_ip != '':
            puts('For ' + colored.yellow('mailcatcher') + ' use : http://' + mailcatcher_ip + ':1080')
            print('                and : smtp://' + mailcatcher_ip + ':1025' + '\n')

        mongoclient_ip = self.__get_vm_item('mongoclient', 'ip')
        if mongoclient_ip != '':
            puts('For ' + colored.yellow('mongoclient') + ' use : http://' + mongoclient_ip + ':3000' + '\n')

        pma_ip = self.__get_vm_item('phpmyadmin', 'ip')
        if pma_ip != '':
            puts('For ' + colored.yellow('phpMyAdmin') + ' use : http://' + pma_ip + '\n')


    def __do_fullstart(self):
        puts(colored.green("\nBuilding required images ..."))
        subprocess.call(['bin/compose', 'build'])
        puts(colored.green("Build done\n"))
        self.__do_start()


    def __do_stop(self):
        puts(colored.yellow("Stopping docker-lamp ..."))
        subprocess.call(['bin/compose', 'stop'])
        puts(colored.yellow("docker-lamp is stopped."))


    def __do_status(self):
        puts(columns(
            [(colored.green('VM')), 20],
            [(colored.green('IP')), 15],
            [(colored.green('Ports')), 30],
            [(colored.green('Image')), 30],
            [(colored.green('Docker ID')), 15],
            [(colored.green('Docker Name')), 25]
        ))

        puts(columns(
            ['-'*20, 20],
            ['-'*15, 15],
            ['-'*30, 30],
            ['-'*30, 30],
            ['-'*15, 15],
            ['-'*25, 25]
        ))

        running_vms = 0
        for vm_id, vm_data in self.vms.items():
            if vm_data['running'] is False:
                continue

            running_vms+= 1
            puts(columns(
                [vm_data['compose_name'], 20],
                [vm_data['ip'], 15],
                [', '.join(vm_data['ports']), 30],
                [vm_data['image'], 30],
                [vm_id[:12], 15],
                [vm_data['name'], 25]
            ))

        if running_vms == 0:
            puts(colored.red('Have you started your server with the start or fullstart action ?'))
            return


    def __do_console(self):
        self.arg_parser.add_argument('vm', help='VMs to enter in (mysql or php)')
        args = self.arg_parser.parse_known_args()
        if args[0].vm not in ['mysql', 'php']:
            raise Exception("You must define the VM as a second argument (php or mysql)")

        vm_name = self.__get_vm_item(args[0].vm, 'name')
        if vm_name == '':
            raise Exception(args[0].vm + ' does not seem to be in your services or has crashed')

        user_name = 'www-data' if args[0].vm == 'php' else 'root'
        tty = 't' if sys.stdin.isatty() else ''
        subprocess.call(['docker', 'exec', '-u', user_name, '-i' + tty, vm_name, 'bash'])


    def __do_run_php(self):
        tty = 't' if sys.stdin.isatty() else ''
        cmd = ['docker', 'exec', '-u', 'www-data', '-it', self.__get_vm_item('php', 'name')]
        cmd+= ['bash', '-c', '--', 'cd /var; exec /usr/bin/php ' + self.__get_unknown_args()]
        subprocess.call(cmd, stdin=sys.stdin)


    def __do_run_mysql(self):
        vm_name = self.__get_vm_item('mysql', 'name')
        if vm_name == '':
            raise Exception('mysql does not seem to be in your services or has crashed')

        tty = 't' if sys.stdin.isatty() else ''
        password = self.config['main'].get('mysql.root_password', 'changeme');
        cmd = ['docker', 'exec', '-u', 'www-data', '-i' + tty, vm_name]
        cmd+= ['mysql', '-u', 'root', '-p' + password, self.__get_unknown_args()]
        subprocess.call(cmd, stdin=sys.stdin)


    def __get_unknown_args(self):
        args = self.arg_parser.parse_known_args()
        return ' '.join(args[1])


    def __run_services_post_scripts(self):
        services = [service for service in self.config['main'].get('services', '').split(',') if service != '']
        for service in services:
            service_script = 'service/' + service + '.sh'
            vm_name = self.__get_vm_item(service, 'name')
            if os.path.isfile(service_script) is False:
                continue

            subprocess.call(['bash', service_script, vm_name])


    def __get_vm_item(self, compose_name: str, item_name: str):
        for vm_id, vm_data in self.vms.items():
            if vm_data['compose_name'] == compose_name:
                return vm_data[item_name]

        return ''


if __name__ == '__main__':
    try:
        lamp = Lamp()
        lamp.call_the_right_action()
    except Exception as e:
        msg =  r"""
              ______ _____  _____   ____  _____
             |  ____|  __ \|  __ \ / __ \|  __ \
             | |__  | |__) | |__) | |  | | |__) |
             |  __| |  _  /|  _  /| |  | |  _  /
             | |____| | \ \| | \ \| |__| | | \ \
             |______|_|  \_\_|  \_\\____/|_|  \_\

"""

        msg += puts(colored.red(str(e)))
        print(msg)
        print("")
        raise e
        sys.exit(1)
