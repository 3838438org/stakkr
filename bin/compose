#!/usr/bin/python3
import os
import sys

from argparse import ArgumentParser
from subprocess import call


def set_env_values_from_conf(conf: list, default_conf: list):
    for conf_parameter in default_conf:
        env_variable = 'DOCKER_{}'.format(conf_parameter.replace('.', '_').upper())
        env_value = conf.get(conf_parameter, default_conf.get(conf_parameter))
        os.putenv(env_variable, env_value)

    os.putenv('DOCKER_UID', conf.get('uid', str(os.getuid())))
    os.putenv('DOCKER_GID', conf.get('gid', str(os.getgid())))


def get_cli_arguments():
    arg_parser = ArgumentParser(description="Process the only argument expected (The command)")
    arg_parser.add_argument('command', help='Command for docker-compose (example: "up" or "ps")')
    args = arg_parser.parse_args()
    command = [args.command]
    if args.command == 'up':
        command.append('-d')
        # for new compose : command.append('--remove-orphans')
    elif args.command == 'ps':
        command.append('-q')

    return command


def get_services_conf_files(services: list):
    services_files = []
    for service in services:
        service_file = 'service/' + service + '.yml'
        if os.path.isfile(service_file) is False:
            print('Error: service ' + service + ' is invalid')
            sys.exit(1)
        services_files.append('-f')
        services_files.append(service_file)

    return services_files


def cli():
    sys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))
    from lib.configreader import Config

    user_config_main = Config('conf/compose.ini').read()['main']
    default_config_main = Config('conf/compose.ini.tpl').read()['main']

    set_env_values_from_conf(user_config_main, default_config_main)

    project_name = str(user_config_main.get('project_name', 'inet' + os.path.basename(os.getcwd()).replace('-', '')))
    # get the services from an array that has been filtered to remove the empty values
    services = [service for service in user_config_main.get('services', '').split(',') if service != '']
    # run docker compose
    cmd = ['docker-compose', '-f', 'docker-compose.yml']
    cmd += get_services_conf_files(services)
    cmd += ['-p', project_name] + get_cli_arguments()
    call(cmd)


if __name__ == '__main__':
    cli()
