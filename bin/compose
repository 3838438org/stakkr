#!/usr/bin/env python3
import click
import os
import sys

from argparse import ArgumentParser
from lib.configreader import Config
from subprocess import call


def set_env_values_from_conf(conf: list, default_conf: list):
    for conf_parameter in default_conf:
        env_variable = 'DOCKER_{}'.format(conf_parameter.replace('.', '_').upper())
        env_value = conf.get(conf_parameter, default_conf.get(conf_parameter))
        os.putenv(env_variable, env_value)

    os.putenv('DOCKER_UID', conf.get('uid', str(os.getuid()) if os.name != 'nt' else '1000'))
    os.putenv('DOCKER_GID', conf.get('gid', str(os.getgid()) if os.name != 'nt' else '1000'))


def get_services_conf_files(services: list):
    services_files = []
    for service in services:
        service_file = 'services/' + service + '.yml'
        if os.path.isfile(service_file) is False:
            print('Error: service ' + service + ' is invalid')
            sys.exit(1)
        services_files.append('-f')
        services_files.append(service_file)

    return services_files


@click.command(help="Run a command with docker-compose", context_settings=dict(ignore_unknown_options=True))
@click.argument('command', nargs=-1, type=click.UNPROCESSED)
def cli(command):
    user_config_main = Config('conf/compose.ini').read()['main']
    default_config_main = Config('conf/compose.ini.tpl').read()['main']
    set_env_values_from_conf(user_config_main, default_config_main)

    project_name = user_config_main.get('project_name', 'inet' + os.path.basename(os.getcwd()).replace('-', ''))
    os.putenv('COMPOSE_PROJECT_NAME', project_name)
    # get the services from an array that has been filtered to remove the empty values
    services = [service for service in user_config_main.get('services', '').split(',') if service != '']

    cmd = ['docker-compose', '-f', 'docker-compose.yml'] + get_services_conf_files(services)
    cmd += ['-p', project_name] + list(command)
    call(cmd)


if __name__ == '__main__':
    cli()
