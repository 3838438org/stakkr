#!/usr/bin/env python3
import click
import os
import sys

from argparse import ArgumentParser
from lib.configreader import Config
from subprocess import call


def set_env_values_from_conf(conf: list, default_conf: list):
    for conf_parameter in default_conf:
        env_variable = 'DOCKER_{}'.format(conf_parameter.replace('.', '_').upper())
        env_value = conf.get(conf_parameter, default_conf.get(conf_parameter))
        os.putenv(env_variable, env_value)

    os.putenv('DOCKER_UID', conf.get('uid', str(os.getuid()) if os.name != 'nt' else '1000'))
    os.putenv('DOCKER_GID', conf.get('gid', str(os.getgid()) if os.name != 'nt' else '1000'))


def get_available_services():
    conf_files = [service for service in os.listdir('services/') if service.endswith('.yml')]
    services = dict()
    for conf_file in conf_files:
        services[conf_file[:-4]] = 'services/' + conf_file

    return services


def add_available_services_from_plugins(available_services: list):
    from pkg_resources import iter_entry_points

    # Override services with plugins
    for entry in iter_entry_points('lamp.plugins'):
        services_dir = 'plugins/' + str(entry).split('.')[1] + '/services'
        if os.path.isdir(services_dir) is False:
            continue

        conf_files = [service for service in os.listdir(services_dir) if service.endswith('.yml')]
        for conf_file in conf_files:
            available_services[conf_file[:-4]] = services_dir + '/' + conf_file

    return available_services


def get_enabled_services(configured_services: list, available_services: list):
    services_files = []
    for service in configured_services:
        if service not in available_services:
            print(click.style('Error: service "{}" has no configuration file. Check your compose.ini'.format(service), fg='red'))
            sys.exit(1)
        services_files.append('-f')
        services_files.append(available_services[service])

    return services_files


@click.command(help="Run a command with docker-compose", context_settings=dict(ignore_unknown_options=True))
@click.argument('command', nargs=-1, type=click.UNPROCESSED)
def cli(command):
    user_config_main = Config('conf/compose.ini').read()['main']
    default_config_main = Config('conf/compose.ini.tpl').read()['main']
    set_env_values_from_conf(user_config_main, default_config_main)

    project_name = user_config_main.get('project_name', 'inet' + os.path.basename(os.getcwd()).replace('-', ''))
    os.putenv('COMPOSE_PROJECT_NAME', project_name)

    # Services from config
    configured_services = [service for service in user_config_main.get('services', '').split(',') if service != '']

    # Services available from base and plugins
    available_services = get_available_services()
    available_services = add_available_services_from_plugins(available_services)
    services = get_enabled_services(configured_services, available_services)

    cmd = ['docker-compose', '-f', 'docker-compose.yml'] + services_files
    cmd += ['-p', project_name] + list(command)

    call(cmd)


if __name__ == '__main__':
    cli()
